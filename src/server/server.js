import FlightSuretyApp from '../../build/contracts/FlightSuretyApp.json';
import Config from './config.json';
import Web3 from 'web3';
import express from 'express';


let config = Config['localhost'];
let web3 = new Web3(new Web3.providers.WebsocketProvider(config.url.replace('http', 'ws')));
web3.eth.defaultAccount = web3.eth.accounts[0];
let flightSuretyApp = new web3.eth.Contract(FlightSuretyApp.abi, config.appAddress, config.dataAddress);

//Defining all possible status codes
let STATUS = [{
  'label': 'STATUS_CODE_UNKNOWN', 'code': 0},{
  'label': 'STATUS_CODE_ON_TIME', 'code': 10},{
  'label': 'STATUS_CODE_LATE_AIRLINE', 'code': 20}, {
  'label': 'STATUS_CODE_LATE_WEATHER', 'code': 30}, {
  'label': 'STATUS_CODE_LATE_TECHNICAL', 'code': 40}, {
  'label': 'STATUS_CODE_LATE_OTHER', 'code': 50}];


  let oracles = [];
  let matchingOracles = [];

//FUNCTION DECLARATION - Registering oracles (using default accounts generated by ganache-cli)
async function registerOracles(callback){
let self = this;
//Registration fee to be paid, when registering an oracle (1 ETH)
let registrationFee = self.flightSuretyApp.methods.REGISTRATION_FEE().call();

//Get all ganache-cli generated accounts (50)
let accounts = await web3.eth.getAccounts();

//Register oracles by iterating through 'accounts' (The forEach() method calls a function once for each element in an array, in order.)
accounts.forEach(async account => { 
  
  let oracles = await self.flightSuretyApp.methods.registerOracle()
  .send({from: account, value: registrationFee}, (error, result) => {
    console.log(error, result);
    callback(error, result);
  });

  let indices = await self.flightSuretyApp.methods.getMyIndexes()
  .send({from: account}, (error, result) => {
    console.log(error, result);
    callback(error, result);
  });

  console.log('Oracle registered with following index: ${indices} on account: ${account}')
  return oracles;

});

}

//FUNCTION CALL TO REGISTER ORACLES
registerOracles();

//Submit oracle responses, when flight status request is send (look at 'latest' Block!) 
flightSuretyApp.events.OracleRequest({
    fromBlock: 'latest'
  }, async function (error, event) {

    if (error) {
    console.log(error);
    }

    let self = this;

    //Store return values of emitted event during execution of "fetchtflightStatus()"-function
    let index = event.returnValues.index;
    let airline = event.returnValues.airline;
    let flight = event.returnValues.flight;
    let timestamp = event.returnValues.timestamp;

    //Checking status of flight
    let status = 0;
    let time = (timestamp * 1000); //JS counts in ms, Solidity counts in s!

    if(time < Date.now()){
      status = STATUS_CODE[2];
    }
    
    //Identifying all oracles with matching indices
    oracles.forEach(oracle => {
      if((oracle.indexes[0] == index) || (oracle.indexes[1] == index) || (oracle.indexes[2] == index)){
        matchingOracles.push(oracle);
      }
    });
    console.log(matchingOracles);

    //Iterate through all oracle responses (only oracles with matching index are considered) and get majority response
    matchingOracles.forEach(oracle => {


      await self.flightSuretyApp.methods.submitOracleResponse(index, airline, flight, timestamp, status)
      .send({from: oracle}, (error, result) => {
        console.log(error, result);
        callback(error, result);
      });

    });

    console.log(event)
});


const app = express();
app.get('/api', (req, res) => {
    res.send({
      message: 'An API for use with your Dapp!'
    })
})

export default app;


