import FlightSuretyApp from '../../build/contracts/FlightSuretyApp.json';
import Config from './config.json';
import Web3 from 'web3';
import express from 'express';


let config = Config['localhost'];
let web3 = new Web3(new Web3.providers.WebsocketProvider(config.url.replace('http', 'ws')));
web3.eth.defaultAccount = web3.eth.accounts[0];
let flightSuretyApp = new web3.eth.Contract(FlightSuretyApp.abi, config.appAddress, config.dataAddress);

//Defining all possible status codes
let STATUS = [{
  'label': 'STATUS_CODE_UNKNOWN', 'code': 0},{
  'label': 'STATUS_CODE_ON_TIME', 'code': 10},{
  'label': 'STATUS_CODE_LATE_AIRLINE', 'code': 20}, {
  'label': 'STATUS_CODE_LATE_WEATHER', 'code': 30}, {
  'label': 'STATUS_CODE_LATE_TECHNICAL', 'code': 40}, {
  'label': 'STATUS_CODE_LATE_OTHER', 'code': 50}];




//Registering oracles (using default accounts generated by ganache-cli)
async function registerOracles(callback){
let self = this;
//Registration fee to be paid, when registering an oracle (1 ETH)
let registrationFee = self.flightSuretyApp.methods.REGISTRATION_FEE().call();

//Get all ganache-cli generated accounts (50)
let accounts = await web3.eth.getAccounts();

//Register oracles by iterating through 'accounts' (The forEach() method calls a function once for each element in an array, in order.)
accounts.forEach(self.flightSuretyApp.methods.registerOracle().send((error, result) => {
    console.log(result, error);
    callback();
  })
})

}

//See oracle usage in App contract!!!


//See oracle usage in App contract!!!


flightSuretyApp.events.OracleRequest({
    fromBlock: 0
  }, function (error, event) {
    if (error) console.log(error)
    console.log(event)
});

const app = express();
app.get('/api', (req, res) => {
    res.send({
      message: 'An API for use with your Dapp!'
    })
})

export default app;


